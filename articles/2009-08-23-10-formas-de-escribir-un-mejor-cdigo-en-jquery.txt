---
title: 10 formas de escribir un mejor código en jQuery
date: 23/08/2009


Sin duda alguna, jQuery se ha vuelto la biblioteca de javascript por excelencia, y no lo digo solamente porque me agrade, la gran cantidad de recursos, plugins, tutoriales y documentación, hacen que a muchos les entre la curiosidad y se inicien en javascript aún cuando nunca les atrajo el lenguaje. 

Y bien, ya que la usamos seguido, o pensamos aprenderla, no nos queda de más conocer unos cuantos tips que nos sirvan para que funcione de un modo más adecuado.  
<span id="more-227"></span>  
Andando por ahí me encontré un post de <a rel="external" href="http://www.myinkblog.com/2009/08/04/10-tips-for-writing-better-jquery-code/">Giulio Bai</a> que aborda este tema en específico y nos dá unas buenas sugerencias al respecto:

## 1. $(document).ready (); Siempre

Todo lo que contenga será ejecutado tan pronto el DOM sea cargado y antes de que los contenidos sean llenados. Te permite agregar eventos a cualquier elemento en la página sin interferir directamente con el markup; todos esos metiches de `onload`, `onclick` y `onLoQueSea` ya no son necesarios, solo escribílos encapsulados ahí.

Un pequeño ejemplo podría ser:

<code name="code" class="js">$(document).ready(function()
 {
    $(".dummy").click(function()
    {
        $(this).css(&#039;color&#039;, &#039;#000000&#039;);
    });
});</code>

## 2. Usá $(window).load ()

Aunque la vasta mayoría de ejemplos vienen usando el método descrito anteriormente, a veces es mejor evitar poner todo ahí.

`$(document).ready ()` es increíblemente útil, pero ocurre durante el rendering de la página, cuando los objetos aún se están descargando. Por eso las funcionalidades supérfluas como scrollings, arrastrar y soltar, podrían ponerse dentro de una función `$(window).load ()` ya que esta ejecuta después de que todos los hayan sido descargados y evita que algo se rompa mientras carga la página.

La sintáxis es casi la misma que la de `$(document).ready ()`:

<code name="code" class="js">$(window).load (function () {
// métodos de scrolling
});</code>

## 3. Carga sólo lo que realmente necesitas

Todos han sido tentados a escribir JavaScript que va a ser usado en una sola página de un sitio y luego cargarlo por todas partes, aunque no se use. jQuery se toma el tiempo de revisar todos y cada uno de los elementos que se le dan, y eso pone las cosas un poco lentas.

Hay dos formas que se sugieren para evitar este problema. El más sencillo sería simplemente agregar una clase en el `body` del html que sea identificador para correr ahí solamente el código necesario.

<code name="code" class="js">$(document).ready(function()
 {
    if (&#039;body&#039;).hasClass(&#039;home&#039;)
    {
        // home page code
        }
    else if (&#039;body&#039;).hasClass(&#039;blog&#039;)
    {
        // blog code
        }
    // Y as&iacute; sucesivamente
});
</code>

El otro método, un poco más enredado, sería construir una biblioteca para llamar el código que se necesite desde cada página:

<code name="code" class="js">var jslib =
{
    home:
    {
        init: function() {
            // home page code
            }
    },

    blog:
    {
        init: function() {
            // blog code
            }
    }

    // Y as&iacute; sucesivamente
}</code>

## 4. Aprende qué es el método ‘Data’ y usálo

Esto es algo muy común, la gente no piensa en ello y siempre escriben cosas como:

<code name="code" class="js">$('.selector').attr ('alt', 'naranja');</code>

para guardar y asociar datos misceláneos en el DOM. Esto, es técnicamente incorrecto, además de que es fácil confundirse, sobre todo para las personas que entren al proyecto después.

jQuery ya tiene un método que sirve para guardar datos en el DOM llamado ‘data’. El ejemplo de arriba vendría siendo algo como esto:

<code name="code" class="js">$('.selector').data ('miColor', 'azul');
// que puede ser pedido con
$('.selector').data ('miColor');</code>

Este método te permite asociar y guardar datos en cualquier elemento de la página y tener un nombre de referencia.

## 5. Usá los selectores personalizados

Estar familiarizado con los selectores de CSS es util cuando se trata de jQuery. Pero conocer los selectores que trae la biblioteca es de verdad un empujón increíble. Date una vuelta por <http://docs.jquery.com/Selectors> para conocer más de ellos.

Por ejemplo, podrías usar:

<code name="code" class="js">$("div:contains('hola')").css ('background-color', '#cc0000');</code>

para pintar de rojo todos los div que contengan la palabra “hola” ó

<code name="code" class="js">$('input:password')</code>

para obtener todos los campos que sean para password.

## 6. Indicadores con clases

Podés usar indicadores ó flags para monitorear lo que el usuario está haciendo o bien revisar si algo en particular se efectuó o no. El método `addClass` es bastante útil en este caso ya que provee una forma fácil de agregar una nueva clase css a un elemento. Así que podés chequear la existencia de la clase con la función `hasClass`.

Un uso muy común de los indicadores se da cuando a aplicación tiene uno o más modos de trabajo; al entrar en el segundo modo, el indicador se fija a un elemento predeterminado y, cuando se necesite, el método `hasClass` es usado para revisar el modo de trabajo actual. Sencillo no?

<code name="code" class="js">function editModeOn ()
{
// Inicializa el modo de edición y fija un indicador
$(&#039;#flags&#039;).addClass ("editModeOn");
// hacer otras cosas
}

function saveData ()
{
// guarda los datos pero primero sale del modo de edición (si está ahí)
if ($(&#039;#flags&#039;).hasClass (&#039;editModeOn&#039;)) {
exitEditMode ();
$(&#039;#flags&#039;).removeClass (&#039;editModeOn&#039;);
}

save ();
}</code>

## 7. No llamés el mismo selector cientos de veces

De verdad, no lo hagas. Perfectamente en lugar de hacer algo como:

<code name="code" class="js">
	$(&#039;p.hola&#039;).css (&#039;color&#039;, &#039;#000000&#039;);
	$(&#039;p.hola&#039;).text (&#039;hoola&#039;);
	$(&#039;p.hola&#039;).addClass (&#039;parrafo&#039;);
	$(&#039;p.hola&#039;).fadeTo (1000, 1);
</code>

Podés hacer algo como:

<code name="code" class="js">
	var $p = $(&#039;p.hola&#039;);
	$p.css (&#039;color&#039;, &#039;#000000&#039;);
	$p.text (&#039;hola&#039;);
	$p.addClass (&#039;parrafo&#039;);
	$p.fadeTo (1000, 1);
</code>

Eso va a mantener la información del selector lista para ser reutilizada.

## 8. Encadenando (Casi) todo

El encadenado, o chaining de jQuery es muy útil.  
El código anterior podría ser reescrito como:

<code name="code" class="js"
>$(&#039;p.hola&#039;).css (&#039;color&#039;, &#039;#000000&#039;).text (&#039;hola&#039;).addClass (&#039;parrafo&#039;).fadeTo (1000, 1);
</code>

Eso sí, sin exagerar, es sabido que este patrón puede ser un poco lento.

## 9. La utilidad toggleClass

Podés encender y apagar la clase de un elemento para variar su comportamiento sin mucho esfuerzo. Digamos que tenés una clase `.hidden` que esconde los elementos que la usen. Fácilmente podrías mostrar los elementos de nuevo usando:

<code name="code" class="js">
	$(&#039;p.hidden&#039;).toggleClass ();
</code>

Otro punto de `toggleClass` es que, con el nuevo release de jQuery 1.3.3, el método .toggleClass() va a tener nuevas formas de operar. Va a ser capaz de cambiar multiples clases, además de que podrá quitar y poner todas las clases.

Estás son las formas en que vas a poder usar `toggleClass`:

<code name="code" class="js">
	// Con un elemento dado

	// Cambiar todas las Clases
	$(&#039;div&#039;).toggleClass(); //
	&lt;div&gt;
	$(&#039;div&#039;).toggleClass(); //
	&lt;div class="a b c"&gt;
	$(&#039;div&#039;).toggleClass( false ); //
	&lt;div&gt;
	$(&#039;div&#039;).toggleClass( true ); //
	&lt;div class="a b c"&gt;

	// Cambiar m&uacute;ltiples clases
	$(&#039;div&#039;).toggleClass( "a b" ); //
	&lt;div class="c"&gt;
	$(&#039;div&#039;).toggleClass( "a c" ); //
	&lt;div class="a"&gt;
	$(&#039;div&#039;).toggleClass( "a b c", false ); //
	&lt;div&gt;
	$(&#039;div&#039;).toggleClass( "a b c", true ); //&lt;/div&gt;
	&lt;/div&gt;
	&lt;/div&gt;
	&lt;/div&gt;
	&lt;/div&gt;
	&lt;/div&gt;
	&lt;/div&gt;</code>

## 10. Guardá los resultados de jQuery

Cuando se trata de funciones, podrías querer tener algunos resultados disponibles en otros lugares. Acá hay dos posibilidades.

Una posible solución sería guardar los resultados dentro de objetos dentro de una variable global, así se pueden usar después:

<code name="code" class="js">
	// usamos el objeto Window
	window.$resultados = {
	uno : 0,
	dos : 0
	};

	// esta es la funci&oacute;n que podria corre m&aacute;s de una vez
	function getResults (first, second)
	{
	$resultados.uno = first;
	$resultados.dos = second;
	}

	// corre la funcion
	getResults ($(&#039;li.azul&#039;), $(&#039;a.rojo));
	$resultados.uno.hasClass (&#039;azul&#039;); // true
	$resultados.dos.hasClass (&#039;azul&#039;); // false

	// corre de nuevo
	getResults ($(&#039;li.rojo&#039;), $(&#039;a.azul));
	$resultados.uno.hasClass (&#039;azul&#039;); // false
	$resultados.dos.hasClass (&#039;azul&#039;); // true
</code>

La otra, y a mi parecer la mejor, como se recomienda en el punto 4 es usar el método Data en lugar de crear una variable global.

<code name="code" class="js">$.data(window, "resultados", { uno: false, dos: true });

//Para accesar los valores:

$.data(window, "resultados").uno; // false
$.data(window, "resultados").dos; // true

// Y para cambiarlos:

$.data(window, "resultados").uno = true;
$.data(window, "resultados").dos = false;
</code>
