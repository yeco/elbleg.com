---
title: Evento Touch y animación para juegos básica con Objective-C
date: 19/08/2010



<p>Una de las acciones más comúnmente utilizadas en aplicaciones para iPhone o iPad es el evento <em>“touch”</em>.  Un evento no es útil si no activa una acción significativa. Acá vas a entender cómo agregar un evento <em>touch</em> a un botón y cómo activar la animación de un objeto. <span id="more-312"></span>Al final, el resultado es este simple control de videojuego: </p>

~
<div class="imgbox">
<object id="scPlayer" class="embeddedObject" width="323" height="225" type="application/x-shockwave-flash" data="http://content.screencast.com/users/whoisyeco/folders/Jing/media/fcae0ef5-9169-439d-9f1c-b05147b699cc/jingswfplayer.swf" ><param name="movie" value="http://content.screencast.com/users/whoisyeco/folders/Jing/media/fcae0ef5-9169-439d-9f1c-b05147b699cc/jingswfplayer.swf" /><param name="quality" value="high" /><param name="bgcolor" value="#FFFFFF" /><param name="flashVars" value="thumb=http://content.screencast.com/users/whoisyeco/folders/Jing/media/fcae0ef5-9169-439d-9f1c-b05147b699cc/FirstFrame.jpg&#038;containerwidth=323&#038;containerheight=225&#038;content=http://content.screencast.com/users/whoisyeco/folders/Jing/media/fcae0ef5-9169-439d-9f1c-b05147b699cc/00000062.swf&#038;blurover=false" /><param name="allowFullScreen" value="true" /><param name="scale" value="showall" /><param name="allowScriptAccess" value="always" /><param name="base" value="http://content.screencast.com/users/whoisyeco/folders/Jing/media/fcae0ef5-9169-439d-9f1c-b05147b699cc/" /></object>
</div>
<p>Pero puede ser extendido ilimitadamente a lo que necesites.</p>
<h2>Paso 1: Crea un nuevo proyecto</h2>
<p>Abrí Xcode e inicia un nuevo proyecto, selecciona <em>“view based application”</em>, dale un nombre, yo le puse <em>“jumping”</em>, te recomiendo ponerle igual para que no te confundas luego.</p>
<div class="imgbox">
  <img src="/img/articles/2010-08/1-20100819-030241.jpg" />
</div>
<p><!-- # --></p>
<h2>Paso 2: Importa los recursos del proyecto</h2>
<p><strong><a href="http://elbleg.com/share/bleg_post_312.zip">Descargate este zip</a></strong>.  Ahí vas a encontrar todos las imágenes que vamos a necesitar para este proyecto, incluyendo tres sprites de Ryu de StreetFighter que me<strike> robé </strike>encontré en PanelMonkey. Vas a necesitar copiar esas imágenes al folder de recursos del proyecto arrastrándolos del finder al panel <em>“Groups &amp; Files”</em> en Xcode.</p>
<div class="imgbox"><img src="/img/articles/2010-08/2-20100819-030147.jpg"/> </div>
<p>Asegurate de seleccionar <em>“Copy items into destination group’s folder (if needed).”</em> cuando te salga la confirnación de Xcode.
</p>
<div class="imgbox">
<img src="/img/articles/2010-08/3-20100819-030326.jpg"/>
</div>
<p>Todas las imagenes que necesitás deberían quedar copiadas ahora en el mismo folder que contiene el proyecto. Ahora para mantener el folder de recursos ordenado, agrupa todas las imagenes que acabas de importar. Para hacerlo solo seleccionalas, click izquierdo y selecciona <em>“group”</em> en el menú que te aparece. Podés darle un nombre a ese grupo también, yo le puse al mío el originalísimo nombre de <em>“images”</em>. </p>
<div class="imgbox">
<img src="/img/articles/2010-08/4-20100819-024851.jpg" />
</div>
<p>Compila y ejecuta la aplicación tal y como está. No deben de haber errores de compilación y el simulador solo debe mostrar una pantalla gris. </p>
<h2>Paso 3: Modifica jumpingAppDelegate.m</h2>
<p>En jumpingAppDelegate.m, modifica el método applicationDidFinishLaunching agregando esta línea: </p>
<pre class="c" name="code">
// Asigna un nuevo view:  
self.viewController = [jumpingViewController alloc];  
  
[window addSubview:viewController.view]; 
</pre>
<p> <br />
Esto le va a asignar un nuevo view controller. Este paso es necesario porque no vas a usar Interface Builder para crear la vista por vos.</p>
<h2>Paso 4: Modifica jumpingViewController.h</h2>
<p>En el header del view controller (jumpingViewController.h), dentro del interface declará una nueva propiedad agregando:</p>
<pre class="c" name="code">
UIImageView *player;
</pre>
<p>  <br />
Luego agrega esto, antes de @end:</p>
<pre class="c" name="code">
@property (nonatomic, retain) UIImageView *player;
</pre>
<p>Esto te permite usar “player” como un class property para una imagen:<br />
El header debería verse algo así:</p>
<pre class="c" name="code">
#import <UIKit/UIKit.h>  
  
@interface jumpingViewController : UIViewController {  
    UIImageView *player;  
}  
  
@property (nonatomic, retain) UIImageView *player;  
  
@end  
</pre>
</p>
<h2>Paso 5: Modifica jumpingViewController.m</h2>
<p>Ahora te toca agregar los gráficos y los elementos de interfaz a esta vista<br />
Abre el archivo jumpingViewController.m y borra todos los métodos comentados que tenga. Dejá intactos los que no están comentados. </p>
<p>Al inicio, después de @implementation jumpingViewController, agregá:</p>
<pre class="c" name="code">  @synthesize player; </pre>
<p>Ahora actualiza el método dealloc para que quede así:</p>
<pre class="c" name="code">
- (void)dealloc {  
    [player release];  
    [super dealloc];  
} 
</pre>
<p>Ahora insertá este método:</p>
<pre class="c" name="code">
- (void)addButton {  
  
    UIButton *button = [[UIButton buttonWithType:UIButtonTypeCustom]  
                                         initWithFrame:CGRectMake(240, 150, 50, 50)];  
  
    // le da una imagen al botón  
    [button setBackgroundImage:[UIImage imageNamed:@"button.png"]  
                 forState:UIControlStateNormal];  
  
    // Fija un evento  
    [button addTarget:self action:@selector(buttonPressed)  
                 forControlEvents:UIControlEventTouchUpInside];  
  
    // Agrega el boton a la vista 
    [self.view addSubview:button];  
} 
</pre>
<p>El método addButton será llamado luego para&#8230; Sí… Eso… Añadir el botón a la vista.</p>
<p>La primer cosa a notar es que estás creando un botón custom. Lo segundo es que buttonPressed es el nombre de un método que va a ser llamado cuando el evento touch es ejecutado.</p>
<p>Create un método buttonPressed temporal agregando esto:</p>
<pre class="c" name="code">
- (void)buttonPressed {  
    NSLog(@"Botón presionado");  
}
</pre>
<p><code>NSLog()</code> enviará un mensaje a la consola, que dicho sea de paso podés ver en el menú Run (cmd + shift + R).<br />
Nuestro querido botón debe aparecer en la pantalla una vez que la vista ha cargado. Para hacer que eso pase agrega este método.</p>
<pre class="c" name="code">
- (void)loadView {  
  
    // Asigna la vista 
    self.view = [[UIView alloc] initWithFrame:[[UIScreen mainScreen] applicationFrame]];  
  
    // Establece el color de fondo de la vista 
    self.view.backgroundColor = [UIColor blackColor];  
  
    // Crea la imagen de fondo 
    UIImageView *bg = [[UIImageView alloc] initWithFrame:CGRectMake(0 , 0, 572, 206)];  
    [bg setImage:[UIImage imageNamed:@"bg.jpg"]];  
    [self.view addSubview:bg];  
  
    // Crea el botón  
    [self addButton];  
}  
</pre>
<p>Este método viene por defecto en los view controllers. Básicamente estás agregando una imagen de fondo y ejecutando el método addButton.</p>
<p>Ok. Guarda lo que has hecho, compila y ejecuta el proyecto. Deberías ver la imagen de fondo y un botón rojo. Si tenés la consola abierta debería desplegarse un mensaje de <code>NSLog()</code> al tocar el botón.</p>
<div class="imgbox">
<img src="/img/articles/2010-08/5-20100819-024954.jpg"/>
</div>
<h2>Paso 6:  Agregando un personaje a la pantalla</h2>
<p>Para inicializar el objeto <code>UIImageView</code>, añade lo siguiente en jumpingViewController.m antes del método addButton: </p>
<pre class="c" name="code">
- (void)initPlayer {  
    self.player = [[UIImageView alloc] initWithFrame:  
                   CGRectMake(10, 100, 77.0, 94.0)];  
    [self normalStance];  
    // opaco para un mejor performance  
    self.player.opaque = YES;  
    [self.view addSubview:self.player];  
}  
- (void)normalStance {  
    [self.player setImage:[UIImage imageNamed:@"ryu.png"]];  
}  
</pre>
<p>Ese código va a inicializar el <code>UIImageView</code> y agregarlo a la vista principal. El método <code>normalStance</code> te será útil luego.</p>
<p>Ahora vas a enviar el <code>initPlayer</code> a la vista principal, para hacerlo solo modificás el método <code>loadView</code> así:</p>
<pre class="c" name="code">
- (void)loadView {  
  
    // Asigna la vista 
    self.view = [[UIView alloc] initWithFrame:[[UIScreen mainScreen] applicationFrame]];  
  
    // Establece el color de fondo de la vista 
    self.view.backgroundColor = [UIColor blackColor];  
  
    // Crea la imagen de fondo 
    UIImageView *bg = [[UIImageView alloc] initWithFrame:CGRectMake(0 , 0, 572, 206)];  
    [bg setImage:[UIImage imageNamed:@"bg.jpg"]];  
    [self.view addSubview:bg];  
  
    // Crea el botón  
    [self addButton];  

   // Ahora inicializas el jugador  
    [self initPlayer];  
}  
</pre>
<p>Compila y ejecuta. El personaje apareció en la pantalla verdád?</p>
<div class="imgbox">
    <img src="/img/articles/2010-08/6-20100819-025059.jpg" />
</div>
<h2>Paso 7: Haciendo el personaje saltar</h2>
<p>Ahora la parte divertida. Sobre <code>addButton</code>, agregá:</p>
<pre class="c" name="code">
- (void)cleanStance {  
    [self.player setImage:nil];  
    self.player.animationImages = nil;  
}  
-(void)jumpStance {  
    [self cleanStance];  
  
    NSArray *imageArray = [[NSArray alloc] initWithObjects:  
                                                   [UIImage imageNamed:@"jump1.png"],  
                                                   [UIImage imageNamed:@"jump2.png"], nil];   
  
        self.player.animationImages = imageArray;  
        self.player.animationDuration = 0.3;  
        self.player.contentMode = UIViewContentModeBottomLeft;  
        [self.view addSubview:self.player];  
        [self.player startAnimating];  
}  
</pre>
<p>El primer método que agregaste elimina cualquier imagen asociada al objeto player. Esto te sirve para limpiar cuadros de animación que se hayan usado antes. El segundo método agrega una animación sencilla al objeto player que va a aparece mientras el objeto se mueve.</p>
<p>Después del método jumpStance agregá: </p>
<pre class="c" name="code">
- (void)jump:(UIImageView *)image {  
    [self jumpStance];  
    [UIView beginAnimations:nil context:NULL];  
    [UIView setAnimationDuration: 0.3];  
    [UIView setAnimationCurve: UIViewAnimationCurveEaseOut];  
    [UIView setAnimationBeginsFromCurrentState:YES];  
        image.transform = CGAffineTransformMakeTranslation(0, -40);  
    [UIView commitAnimations];  
}  
</pre>
<p>Este método es el que mueve el jugador. Primero cambia el set de imágenes y luego lo mueve 40 pixels verticalmente.</p>
<p>La linea:</p>
<pre class="c" name="code">
[UIView setAnimationCurve: UIViewAnimationCurveEaseOut];  
</pre>
<p>Agrega un efecto de easing a la animación, así se ve un poco más realista, creo.</p>
<p>Cambiá el método buttonPressed para que quede algo así:  </p>
<pre class="c" name="code">
- (void)buttonPressed {  
    [self jump:self.player];  
}  
</pre>
<p>Compila y ejecuta otra vez. Cuando presionas el botón el personaje debe saltar, pero se va a quedar congelado en el aire al mejor estilo de matrix. Buen progreso no? Ahora dejemos que baje. </p>
<h2>Paso 8: Terminando la animación del personaje</h2>
<p>Antes del método jump agregá:</p>
<pre class="c" name="code">
-(void)fall:(NSString *)animationID finished:(NSNumber *)finished context:(void *)context {  
    [self cleanStance];  
    [self normalStance];  
  
    [UIView beginAnimations:nil context:NULL];  
    [UIView setAnimationCurve: UIViewAnimationCurveEaseOut];  
    [UIView setAnimationBeginsFromCurrentState:YES];  
    [UIView setAnimationDuration:0.2];  
        self.player.transform = CGAffineTransformMakeTranslation(0, 0);  
    [UIView commitAnimations];  
}  
</pre>
<p>Esto hará que el personaje regrese a un estado normal y se mueva a su posición inicial.<br />
Ahora, cambiá el método <code>jump</code> para que quede así:</p>
<pre class="c" name="code">
- (void)jump:(UIImageView *)image {  
    [self jumpStance];  
    [UIView beginAnimations:nil context:NULL];  
    [UIView setAnimationDuration: 0.3];  
    [UIView setAnimationCurve: UIViewAnimationCurveEaseOut];  
    [UIView setAnimationBeginsFromCurrentState:YES];  
  
    // Ejecuta fall cuando la animación termine  
    [UIView setAnimationDelegate:self];  
    [UIView setAnimationDidStopSelector:@selector(fall:finished:context:)];  
    image.transform = CGAffineTransformMakeTranslation(0, -40);  
    [UIView commitAnimations];  
}  
</pre>
<p>Compila y ejecuta. Ryu debe saltar de felicidad y regresar al suelo cuando presiones el botón rojo. Es todo.</p>
<h2>Conclusion, Conclusion, Conclusion&#8230;</h2>
<p>Creo que con esto te queda un mejor entendimiento de algunas de las clases más usadas como <code>UIButton, NSLog, UIImageView</code> y cómo ejecutar animaciones. Podés usar un enfoque similar para agregar otros botones a la pantalla para ejecutar diferentes eventos u otras acciones en otros objetos.</p>
